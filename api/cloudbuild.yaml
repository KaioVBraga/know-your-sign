steps:
  - id: package
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      # - '${_IMAGE_NAME}:${_VERSION}'
      # - '-t'
      - '${_IMAGE_NAME}:latest'
      - 'api'

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Update VM'
    entrypoint: '/bin/bash'
    args:
      - '-c'
      - |
        # Connect to the VM and run a series of commands
        gcloud compute ssh ${_SERVICE_ACCOUNT}@${_INSTANCE_NAME} \
        --zone=${_DEFAULT_REGION}-c \
        --tunnel-through-iap \
        --plain \
        --command="
          # Update the package list
          sudo apt-get update -y

          # Install Docker and its dependencies
          sudo apt-get install -y docker.io

          # Add the user to the docker group so you can run docker without sudo
          # Note: This might not be necessary if you're already running as root,
          # but it's good practice. Replace `sa_<username>` with the actual user if needed.
          sudo usermod -aG docker ${_SERVICE_ACCOUNT}

          # Verify Docker is installed and running
          sudo systemctl start docker
          sudo systemctl enable docker

          # Now, run your original Docker commands
          docker stop kys-api || true && docker rm kys-api || true && docker pull ${_IMAGE_NAME}:latest && docker run -d --name=kys-api -p 80:8080 ${_IMAGE_NAME}:latest
        "

  # This step deploys the application to the Compute Engine VM.
  # It uses the 'gcloud' builder to SSH into the VM and execute commands.
  # The commands stop the old container, remove it, and start a new one with the latest image.
  # - id: 'Deploy to Compute Engine'
  #   name: 'gcr.io/cloud-builders/gcloud'
  #   args:
  #     - 'compute'
  #     - 'ssh'
  #     - '${_SERVICE_ACCOUNT}@${_INSTANCE_NAME}'
  #     - '--tunnel-through-iap'
  #     - '--zone=${_DEFAULT_REGION}-c' # Assumes your VM is in zone 'a' of your default region.
  #     - '--command=docker stop kys-api || true && docker rm kys-api || true && docker pull ${_IMAGE_NAME}:latest && docker run -d --name=kys-api -p 80:8080 ${_IMAGE_NAME}:latest'

images: ['${_IMAGE_NAME}']

substitutions:
  _SERVICE_ACCOUNT: kys-build-service-account
  _INSTANCE_NAME: kys-api-instance
  _DEFAULT_REGION: us-central1
  _ARTIFACT_REPO: kys
  _IMAGE_NAME: ${_DEFAULT_REGION}-docker.pkg.dev/know-your-sign/${_ARTIFACT_REPO}/kys-api

options:
  dynamicSubstitutions: true
  logging: CLOUD_LOGGING_ONLY
